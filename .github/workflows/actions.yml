# This workflow builds, tests, and deploys the Liatrio exercise Docker image.
name: Build, Test, Deploy Image to Docker Hub, Deploy to Production

on:
  push:
    branches: [ main ]  # Trigger the workflow on pushes to the main branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for this job
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4  # Clones the repository so subsequent steps can access the code
    
    # Build and Run the Container with Docker
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag liatrio-exercise:latest
      # Build the Docker image using the specified Dockerfile and tag it as "liatrio-exercise:latest"
    
    - name: Start the Container
      run: docker run -d -p 80:80 --name app liatrio-exercise:latest
      # Run the container in detached mode, mapping port 80 of the container to port 80 on the host,
      # and name the running container "app"
    
    # Runs tests provided by Liatrio using apprentice-action
    - name: run tests
      # Uses a specific commit of the Liatrio apprentice-action that omits an unfinished minified JSON test
      uses: liatrio/github-actions/apprentice-action@0b41561cca6822cc8d880fe0e49e7807a41fdf91
  
  # Publish Image to Docker Hub
  image-to-docker-hub:
    needs: build-and-test  # This job depends on the build-and-test job and will run only if it completes successfully
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for Docker Hub deployment
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4  # Clones the repository again as it's required for the Docker build
      
      - uses: mr-smithers-excellent/docker-build-push@v6
        name: Build & push Docker image
        with:
          image: madisonewebb28/liatrio_exercise_docker  # Name of the Docker image on Docker Hub
          tags: v1, latest  # Tag the image with "v1" and "latest"
          registry: docker.io  # Specify Docker Hub as the registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Docker Hub username stored in GitHub secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Docker Hub token stored in GitHub secrets for authentication

  deploy-to-production:
      needs: build-and-test
      runs-on: ubuntu-latest  # Use the latest Ubuntu runner
      steps:
      # Step 1: Get the public IP address of the GitHub Actions runner
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2  # Action that retrieves the public IP of the runner

      # Step 2: Add the retrieved IP to the AWS security group, allowing SSH access
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS credentials stored in GitHub secrets
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      # Step 3: Connect via SSH and deploy the latest code to the production server
      - name: Deploy to prod server
        uses: appleboy/ssh-action@v1.2.2  # SSH action to execute commands on the remote server
        with:
          host: ${{ secrets.HOST_IP }}
          username: ec2-user                  # Username for SSH connection on EC2
          key: ${{ secrets.SSH_KEY }}
          script: |
              set -e
              cd /home/ec2-user/liatrio-interview-exercise
              git pull origin main
              sudo docker build -t liatrio-exercise:latest .
              sudo docker stop app || true
              sudo docker rm app || true
              sudo docker run -d -p 80:80 --name app liatrio-exercise:latest

      # Step 4: Remove the GitHub Actions runner IP from the AWS security group after deployment
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        # Ensure this step runs even if previous steps fail
        if: always()

