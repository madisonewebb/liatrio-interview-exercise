# This workflow deploys my code to a production AWS EC2 instance when changes are pushed to the main branch
name: Deploy to Production AWS EC2 Instance

on:
  push:
    branches: [ main ]  # Trigger deployment when there is a push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
    # Step 1: Get the public IP address of the GitHub Actions runner
    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2  # Action that retrieves the public IP of the runner

    # Step 2: Add the retrieved IP to the AWS security group, allowing SSH access
    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS credentials stored in GitHub secrets
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    # Step 3: Connect via SSH and deploy the latest code to the production server
    - name: Deploy to prod server
      uses: appleboy/ssh-action@master  # SSH action to execute commands on the remote server
      with:
        host: ${{ secrets.HOST_IP }}        # Production server IP address from GitHub secrets
        username: ec2-user                  # Username for SSH connection on EC2
        key: ${{ secrets.SSH_KEY }}         # SSH key from GitHub secrets for authentication
        script: |
            set -e
            cd /home/ec2-user/liatrio-interview-exercise
            git pull origin main
            sudo docker build -t liatrio-exercise:latest .
            sudo docker stop app || true
            sudo docker rm app || true
            sudo docker run -d -p 80:80 --name app liatrio-exercise:latest

    # Step 4: Remove the GitHub Actions runner IP from the AWS security group after deployment
    - name: Remove Github Actions IP from security group
      run: |
        aws ec2 revoke-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      if: always()  # Ensure this step runs even if previous steps fail
